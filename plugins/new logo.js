const Nima = require('../events');
const { MessageType, Mimetype } = require('@adiwajshing/baileys');
const axios = require('axios');
const Config = require('../config');
let wk = Config.WORKTYPE == 'public' ? false : true



    Nima.addrex({pattern: 'lpack', fromMe: false,  deleteCommand: false }, (async (message, match) => {
            var image = await axios.get ('https://telegra.ph/file/f3b0b4e681583334b7330.jpg', {responseType: 'arraybuffer'}) 
            await message.client.sendMessage (message.jid, Buffer.from (image.data), MessageType.image, {mimetype: Mimetype.png, caption: `‚ïê‚ïê‚ïê‚¶Å LOGO LIST ‚¶Å‚ïê‚ïê‚ïê

üñäÔ∏è .light
ü™Å Light ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í 

üñäÔ∏è .neon
ü™Å Neon ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í 

üñäÔ∏è .gneon 
ü™Å Green neon ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í  

üñäÔ∏è .glow
ü™Å Glow ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í 

üñäÔ∏è .firework
ü™Å Fire Work ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í 

üñäÔ∏è .led
ü™Å Led ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í 

üñäÔ∏è .grafiti
ü™Å Grafiti ‡∑É‡∂∏‡∂ú ‡∂î‡∂∂‡∑ö ‡∂Ö‡∂ö‡∑î‡∂ª‡∑î ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∑É‡∑è‡∂Ø‡∂∫‡∑í 
 

¬©  ü·¥è…¢·¥è·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è ·¥ç Ä …¥…™·¥ç·¥Ä 
üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ`,quoted: message.data}) 

    }));

    

Nima.addrex({ pattern: 'round ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
    const link = await axios.get('https://leyscoders-api.herokuapp.com/api/img/circle?url=${encodeURIComponent' + match[1] + '&apikey=dappakntlll')
    const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})




Nima.addrex({ pattern: 'light ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/light?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})





Nima.addrex({ pattern: 'neon ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/neon?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})

 




Nima.addrex({ pattern: 'gneon ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/gneon?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})




Nima.addrex({ pattern: 'glow ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/glow?text=r' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})




Nima.addrex({ pattern: 'firework ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/firework?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})




Nima.addrex({ pattern: 'led ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/led-text?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})



Nima.addrex({ pattern: 'grafiti ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/grafiti?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})








Nima.addrex({ pattern: 'future ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/future?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})




Nima.addrex({ pattern: 'smetal ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/smetal?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})





Nima.addrex({ pattern: 'anciant ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/ancient?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})




Nima.addrex({ pattern: 'clout ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/cloud?text=rest%20api&apikey=sanuwa' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})





Nima.addrex({ pattern: 'matrix ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/matrix?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})



Nima.addrex({ pattern: 'pencil ?(.*)', fromMe: wk,  dontaddrexList: true, deleteCommand: false }, async (message, match) => {
  
if (!match[1]) return await message.client.sendMessage(message.jid,'‡∂ö‡∂∏‡∑è‡∂±‡∑ä‡∂©‡∑ä ‡∂ë‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∂î‡∂∂‡∑ö  ‡∑Ä‡∂†‡∂±‡∂∫ ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂± !', MessageType.text, { quoted: message.data });
  
  const link = await axios.get('https://sanuw-api.herokuapp.com/docs/textpro/pencil?text=' + match[1] + '&apikey=sanuwa')
  const img = await axios.get(link.data.url , { responseType: 'arraybuffer'})
  
  await message.sendMessage(Buffer.from(img.data), MessageType.image , { caption: '·¥ç Ä …¥…™·¥ç·¥Ä üé≠  ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ä ü·¥ò ú·¥Ä ·¥°·¥Ä  ô·¥è·¥õ ·¥õ·¥á·¥Ä·¥ç' ,quoted: message.data  }) 
})
    }));
